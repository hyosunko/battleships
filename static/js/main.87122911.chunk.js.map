{"version":3,"sources":["Header.js","Board.js","GameInfo.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","boardInfo","shipHitMessage","winStatus","Component","Board","onClick","fireClick","id","GameInfo","reset","e","preventDefault","_this","torpedoCount","onSubmit","type","battleShipRemains","battleShipTotal","shipInfo","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","window","location","reload","createBoard","_this$state","state","boardArray","boardSize","Array","Math","pow","fill","setState","placeShip","_this$state2","shipPosition","shipCount","length","currentShipPosition","loopBreaker","shipNamePosition","noOfShip","firstShipPosition","floor","random","shipDirection","x","trunc","y","digit","checkPositionCount","i","push","console","log","cellId","parseInt","target","_this$state3","fireCount","shipHitCondition","clickedCellArray","document","getElementById","pos","getIndexOfHit","shipRemain","reduce","b","concat","map","v","style","backgroundColor","arr","k","index","indexOf","boardColWidth","_this$state4","currentShipHitCondition","xBefore","xAfter","yBefore","yAfter","_this2","grids","src_Board","boardValue","gridStyle","display","margin","justifyContent","gridTemplateColumns","join","src_Header","src_GameInfo","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.87122911.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"title-header\">\r\n\t\t\t\tBattleship Game\r\n\t\t\t\t<p>{this.props.boardInfo.shipHitMessage}{this.props.boardInfo.winStatus}</p>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\n\r\n\r\nclass Board extends Component{\r\n// fire=(e)=>{\r\n// \te.preventDefault();\r\n// \tthis.props.fireClick();\r\n// }\r\n\t\t\t\t// {this.props.boardValue}\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"cell\" onClick={this.props.fireClick} id={this.props.id}>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Board","import React, { Component } from 'react';\r\n\r\nclass GameInfo extends Component{\r\n\treset=(e)=>{\r\n\t\t// prevent page refresh\r\n\t\te.preventDefault()\r\n\t\t// call board initialize function\r\n\t\tthis.props.reset()\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"footer\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Torpedo Remains : {this.props.boardInfo.torpedoCount}</p>\r\n\t\t\t\t\t<form className=\"form-button\" onSubmit={this.reset}>\r\n\t\t\t\t\t\t<button className=\"button1\" type=\"submit\">Reset</button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\tShip Remains : {this.props.boardInfo.battleShipRemains}/{this.props.boardInfo.battleShipTotal}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[0][1]}({this.props.boardInfo.shipInfo[0][2]}Blocks) : {this.props.boardInfo.shipInfo[0][4]}/{this.props.boardInfo.shipInfo[0][3]} <br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[1][1]}({this.props.boardInfo.shipInfo[1][2]}Blocks) : {this.props.boardInfo.shipInfo[1][4]}/{this.props.boardInfo.shipInfo[1][3]}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[2][1]}({this.props.boardInfo.shipInfo[2][2]}Blocks) : {this.props.boardInfo.shipInfo[2][4]}/{this.props.boardInfo.shipInfo[2][3]}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[3][1]}({this.props.boardInfo.shipInfo[3][2]}Blocks) : {this.props.boardInfo.shipInfo[3][4]}/{this.props.boardInfo.shipInfo[3][3]}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[4][1]}({this.props.boardInfo.shipInfo[4][2]}Blocks) : {this.props.boardInfo.shipInfo[4][4]}/{this.props.boardInfo.shipInfo[4][3]}<br/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default GameInfo","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Board from './Board';\nimport GameInfo from './GameInfo';\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      boardSize: 10,\n      //0: available, 1: empty hit, 10: ship, 11: ship hit \n      boardArray:[],\n      torpedoCount:50,\n      fireCount:0,\n      //s1: ship key, ship name, ship size, no of ship, no ship remain\n      shipInfo:[[1,\"Carrier\",5,1,1], [2,\"Battleship\",4,2,2], [3,\"Destroyer\",3,2,2], [4,\"Submarine\",3,2,2], [5,\"Patrol Boat\",2,2,2]],\n      shipPosition:[],\n      shipHitCondition:[],\n      boardColWidth : [],\n      shipHitMessage:\"\",\n      winStatus:\"\",\n      battleShipTotal:0,\n      battleShipRemains:0,\n      clickedCellArray:[]\n    }\n  }\n\ncomponentDidMount(){\n  let {boardSize, boardArray, torpedoCount, shipInfo, shipPosition, shipHitCondition, boardColWidth, battleShipRemains, battleShipTotal} = this.state;\n  //fill initial board data with 0\n  boardArray = Array(boardSize**2).fill(0);\n  //set up column width\n  boardColWidth = Array(boardSize).fill('50px')\n  // this.createBoard();\n  // this.placeShip();\n\n  let shipCount = shipInfo.length;\n  let currentShipPosition=[];\n  let currentShipHitCondition=[];\n  let loopBreaker = 1000;\n  //loop untill all ships are placed\n  battleShipRemains = shipInfo.map(v=>v[4]).reduce((a,b)=>a+b)\n  battleShipTotal = battleShipRemains;\n  while(shipCount > 0){\n    //start with shipInfo[0]\n    let shipNamePosition = shipInfo.length - shipCount\n    //0: kinds of ships, 1: name of ships, 2:length of ships, 3: # of ships\n    let noOfShip = shipInfo[shipNamePosition][3]\n    //loop until # of ships are placed\n    while(noOfShip>0){\n      // set up random position and direction\n      // let shipDirection = 1\n      let shipDirection = Math.floor(Math.random()*2)\n      let firstShipPosition = Math.floor(Math.random()*boardSize**2)\n      // console.log(\"firstShipPosition \", firstShipPosition, shipDirection)\n      // x: thens' digit, y = units' digit\n      let x = Math.trunc(firstShipPosition/boardSize)%boardSize; \n      let y = firstShipPosition % boardSize;\n      // console.log(\"   \")\n      // console.log(\"1  firstShipPosition: \", firstShipPosition)\n      // console.log(\"loopBreaker:\", loopBreaker)\n      if(loopBreaker<0){\n        noOfShip--\n        shipCount--\n        break;\n      }\n      // console.log(\"ship size: shipname\", shipInfo[shipNamePosition][2], shipInfo[shipNamePosition][1])\n      // console.log(\"shipDirection:\", shipDirection)\n      // console.log(\"x,y : \", x, y)\n      // console.log(\"x0+ship size\", x + shipInfo[shipNamePosition][2])\n      // console.log(\"y1+ship size\", y + shipInfo[shipNamePosition][2])\n      // if 1st position of ship + ship size is less than board size w/direction & digit match (0, x), (1, y) \n      if((shipDirection === 0 && x + shipInfo[shipNamePosition][2]<boardSize)||(shipDirection === 1 && y + shipInfo[shipNamePosition][2]<boardSize)){\n        // console.log(\"  x, y :after \", x, y)\n        // direction : 0 = ten, 1 = one\n        let digit = shipDirection ===0 ? boardSize**1:boardSize**0\n        // console.log(\"digit\",digit)\n        // console.log(\"shipInfo[shipNamePosition][2]\",shipInfo[shipNamePosition][2])\n        // check if any of ship positions are empty\n        let checkPositionCount = 0;\n        for(let i = 0;i<shipInfo[shipNamePosition][2];i++){\n          // console.log(\"ship pos:\", x*boardSize+y+i*digit, boardArray[x*boardSize+y+i*digit])\n          // check left,right,up,down position\n          let xBefore = x-1 <0 ? x : x-1\n          let xAfter = x+1 >= boardSize ? x : x+1\n          let yBefore = y-1 < 0 ? y : y-1\n          let yAfter = y+1 >= boardSize ? y : y+1\n          // console.log(\"x, xBefore xAfter\", xBefore, x, xAfter)\n          // console.log(\"y, yBefore yAfter\", yBefore,y, yAfter)\n          if((boardArray[x*boardSize+y+i*digit]===0)&&(boardArray[(xBefore)*boardSize+y+i*digit]===0)&&(boardArray[(xAfter)*boardSize+y+i*digit]===0)&&(boardArray[x*boardSize+(yAfter)+i*digit]===0)&&(boardArray[x*boardSize+(yBefore)+i*digit]===0)){\n          // if(boardArray[x*boardSize+y+i*digit]===0){\n            checkPositionCount++\n          } else {\n            loopBreaker--;\n            break;\n          }\n          // console.log(\"checkPositionCount\", checkPositionCount)\n          if(loopBreaker<0){\n            break;\n          }\n        }\n        // place ship info if checkPositionCoun = size of ship\n        if(checkPositionCount === shipInfo[shipNamePosition][2]){\n          for(let i = 0; i<shipInfo[shipNamePosition][2];i++){\n            //x*boardSize+y : start of array, i*digit: next position adder\n            boardArray[x*boardSize+y+i*digit]=shipInfo[shipNamePosition][0]*10\n            //collect a ship position\n            currentShipPosition.push(x*boardSize+y+i*digit)\n            currentShipHitCondition.push(1)\n          }\n          // console.log(\"currentShipPosition\", currentShipPosition)\n          noOfShip--;\n          // add a ship postion to ship position array\n          shipPosition.push(currentShipPosition);\n          // console.log(\"shipPosition: click\", shipPosition)\n          shipHitCondition.push(currentShipHitCondition);\n          // console.log(\"shipHitCondition: click \", shipHitCondition);\n          // reset current ship position array\n          currentShipPosition=[];\n          currentShipHitCondition=[];\n          loopBreaker--;\n        }\n      }\n    }\n    shipCount--;\n    loopBreaker--;\n    if(loopBreaker<0){\n      break;\n    }\n\n  }\n\n  this.setState({boardArray:boardArray, shipPosition:shipPosition, shipHitCondition:shipHitCondition, boardColWidth:boardColWidth, battleShipRemains:battleShipRemains, battleShipTotal:battleShipTotal})\n  // console.log(\"shipInfo\",shipInfo)\n  // console.log(\"boardArray\", boardArray)\n  // console.log(\"shipPosition\",shipPosition)\n  // console.log(\"shipHitCondition\", shipHitCondition)\n  // console.log(\"boardColWidth\",boardColWidth)\n}\n\nreset=()=>{\n  window.location.reload()  \n}\n\n\n\ncreateBoard=()=>{\n  let {boardArray, boardSize}=this.state;\n  boardArray=Array(boardSize**2).fill(0)\n  this.setState=({boardArray:boardArray})\n}\n\nplaceShip=()=>{\n  let {boardSize, boardArray, shipInfo, shipPosition}=this.state;\n  let shipCount = shipInfo.length;\n  let currentShipPosition=[];\n  let loopBreaker = 100;\n  boardArray = Array(boardSize**2).fill(0);\n  // this.createBoard();\n  while(shipCount > 0){\n    let shipNamePosition = shipInfo.length - shipCount\n    let noOfShip = shipInfo[shipNamePosition][3]\n    while(noOfShip>0){\n      let firstShipPosition = Math.floor(Math.random()*boardSize**2)\n      let shipDirection = Math.floor(Math.random()*2)\n      let x = Math.trunc(firstShipPosition/boardSize)%boardSize; \n      let y = firstShipPosition % boardSize;\n      // console.log(\"   \")\n      // console.log(\"1  firstShipPosition: \", firstShipPosition)\n      // console.log(\"loopBreaker:\", loopBreaker)\n      if(loopBreaker<0){\n        noOfShip--\n        shipCount--\n        break;\n      }\n      // console.log(\"ship size: shipname\", shipInfo[shipNamePosition][2], shipInfo[shipNamePosition][1])\n      // console.log(\"shipDirection:\", shipDirection)\n      // console.log(\"x,y : \", x, y)\n      // console.log(\"x0+ship size\", x + shipInfo[shipNamePosition][2])\n      // console.log(\"y1+ship size\", y + shipInfo[shipNamePosition][2])\n      if((shipDirection === 0 && x + shipInfo[shipNamePosition][2]<boardSize)||(shipDirection === 1 && y + shipInfo[shipNamePosition][2]<boardSize)){\n        // console.log(\"  x, y :after \", x, y)\n        let digit = shipDirection ===0 ? boardSize**1:boardSize**0\n        // console.log(\"digit\",digit)\n        // console.log(\"shipInfo[shipNamePosition][2]\",shipInfo[shipNamePosition][2])\n        let checkPositionCount = 0;\n        for(let i = 0;i<shipInfo[shipNamePosition][2];i++){\n          // console.log(\"ship pos:\", x*boardSize+y+i*digit, boardArray[x*boardSize+y+i*digit])\n          if(boardArray[x*boardSize+y+i*digit]===0){\n            checkPositionCount++\n          } else {\n            loopBreaker--;\n            break;\n          }\n          // console.log(\"checkPositionCount\", checkPositionCount)\n          if(loopBreaker<0){\n            break;\n          }\n        }\n        if(checkPositionCount === shipInfo[shipNamePosition][2]){\n          for(let i = 0; i<shipInfo[shipNamePosition][2];i++){\n            boardArray[x*boardSize+y+i*digit]=shipInfo[shipNamePosition][0]*10;\n            currentShipPosition.push(x*boardSize+y+i*digit)\n          }\n          noOfShip--;\n          shipPosition.push(currentShipPosition);\n          currentShipPosition=[];\n          loopBreaker--;\n        }\n      }\n    }\n    shipCount--;\n    loopBreaker--;\n    if(loopBreaker<0){\n      break;\n    }\n\n  }\n\n  this.setState({boardArray:boardArray, shipPosition:shipPosition})\n  console.log(boardArray)\n}\n\n\nfireClick = e =>{\n  let cellId = parseInt(e.target.id);\n  let {boardArray, boardSize, torpedoCount, fireCount, shipInfo, shipPosition, shipHitCondition, shipHitMessage, winStatus, battleShipRemains, clickedCellArray}=this.state\n  console.log(\" \")\n  console.log(this.state)\n\n  var x = document.getElementById(cellId);\n  console.log(\"x: \",x)\n \n  // check torpedoCount\n  if(torpedoCount>0 && boardArray[cellId]%boardSize===0 && winStatus===\"\" ){\n    boardArray[cellId]++;\n    torpedoCount--;\n    shipHitMessage=\"\";\n    if(boardArray[cellId]>1){\n      let pos = this.getIndexOfHit(shipPosition,cellId);\n      shipHitCondition[pos[0]][pos[1]]=0;\n      // console.log(\"shipHitCondition\", shipHitCondition[pos[0]])\n      let shipRemain = shipHitCondition[pos[0]].reduce((a,b)=> a+b)\n      let totalShipRemain = shipHitCondition.reduce((a,b)=> a.concat(b)).reduce((a,b)=>a+b)\n      if(totalShipRemain===0){\n        winStatus = \"You won the game\";\n        console.log(\"games status: \", winStatus)\n        for(let i=0; i<shipInfo.length;i++){\n          shipInfo[i][4]=0\n        }\n        battleShipRemains = 0;\n      } else if(torpedoCount===0){\n        winStatus = \"You lost the game\";\n        console.log(\"games status: \", winStatus)\n      } else if(shipRemain===0){\n          shipHitMessage = `${shipInfo[Math.trunc(boardArray[cellId]/boardSize)-1][1]} has been destroyed` ;\n          shipInfo[Math.trunc(boardArray[cellId]/boardSize)-1][4]--;\n          battleShipRemains = shipInfo.map(v=>v[4]).reduce((a,b)=>a+b);\n          console.log(\"shipHitMessage: \", shipHitMessage)\n      }\n      // console.log(\"sum\", shipRemain)\n      // console.log(\"total\", totalShipRemain)\n    } else {\n      if(torpedoCount===0){\n        winStatus = \"You lost the game\";\n        x.style.backgroundColor = 'gray';\n      }\n\n    }\n      console.log(\"boardArray[cellId]\", boardArray[cellId])\n    if(boardArray[cellId]>1){\n      x.style.backgroundColor = 'red';\n    } else {\n      x.style.backgroundColor = 'gray';\n    }\n    clickedCellArray.push(x);\n  }\n\n  this.setState({boardArray:boardArray, torpedoCount:torpedoCount, fireCount:fireCount, shipPosition:shipPosition, shipHitCondition:shipHitCondition, shipHitMessage:shipHitMessage, winStatus:winStatus, battleShipRemains:battleShipRemains, clickedCellArray:clickedCellArray})\n}\n\n\ngetIndexOfHit = (arr, k) =>{\n    if (!arr){\n        return [];\n    }\n    // console.log(\"arr\",arr)\n    // console.log(\"k\", k)\n    // console.log(\"type of k\", typeof(k))\n    for(let i=0; i<arr.length; i++){\n        let index = arr[i].indexOf(k);\n        // for(let j=0; j<arr[i].length;j++){\n        //   console.log(\"i,j\", arr[i][j], i, j, k, arr[i][j]===k)\n        //   if(arr[i][j]===k){\n        //     return [i, j]\n        //   }\n        // }\n        // console.log(\"index\",arr[i],index)\n        if (index > -1){\n          // console.log(\"return i, index\", i, index)\n            return [i, index];\n        }\n    }\n    \n    return [];\n}\n\n\n\n  render(){\n    console.log('render state', this.state)\n    let grids = this.state.boardArray.map((v, i)=>{\n      return (\n        <Board id = {i} fireClick={this.fireClick} boardValue={this.state.boardArray[i]} />\n        )\n    })\n\n    let gridStyle={\n      display: 'grid',\n      margin: 'auto',\n      justifyContent: 'center',\n      gridTemplateColumns: this.state.boardColWidth.join(' ')\n    }\n    return(\n      <div>\n        <Header boardInfo={this.state} />\n        <div style={gridStyle}>\n          {grids}\n        </div>\n        <GameInfo boardInfo={this.state} reset={this.reset}/>\n      </div>\n      )\n  }\n}\n\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}