{"version":3,"sources":["Header.js","Board.js","GameInfo.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","boardInfo","shipHitMessage","winStatus","Component","Board","cellStyle","height","boxSize","width","backgroundColor","style","onClick","fireClick","id","shipImage","GameInfo","reset","e","preventDefault","_this","torpedoCount","onSubmit","type","battleShipRemains","battleShipTotal","shipInfo","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getScreenWidth","de","document","body","parentNode","db","window","opera","clientWidth","compatMode","location","reload","createBoard","boardArray","boardSize","Array","Math","pow","fill","placeShip","cellId","parseInt","target","_this$state","state","shipPosition","shipHitCondition","clickedCellArray","shipImageArray","console","log","x","getElementById","pos","getIndexOfHit","shipRemain","reduce","b","concat","map","v","i","length","trunc","push","setState","arr","k","index","indexOf","boardColWidth","_this$state2","screenWidth","shipCount","currentShipPosition","currentShipHitCondition","loopBreaker","shipNamePosition","noOfShip","shipDirection","floor","random","firstShipPosition","y","digit","checkPositionCount","xBefore","xAfter","yBefore","yAfter","_this2","grids","src_Board","key","boardValue","gridStyle","display","margin","justifyContent","gridTemplateColumns","join","src_Header","src_GameInfo","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.f3c51d26.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component{\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"title-header\">\r\n\t\t\t\tBattleship Game\r\n\t\t\t\t<p>{this.props.boardInfo.shipHitMessage}{this.props.boardInfo.winStatus}</p>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\r\n\r\n\r\nclass Board extends Component{\r\n\t// constructor(props){\r\n\t// \tsuper(props)\r\n\t// \tthis.state={\r\n\t// \t\tisOn: false,\r\n\t// \t\t// img: \"images/patrol_boat1.gif\"\r\n\t// \t\t// img: \"http://www.myiconfinder.com/uploads/iconsets/256-256-9b952124a7973cedd363015231bfe197.png\"\r\n\t// \t}\r\n\t// }\r\n// fire=(e)=>{\r\n// \te.preventDefault();\r\n// \tthis.props.fireClick();\r\n// }\r\n\trender(){\r\n\t\tlet cellStyle={\r\n\t      height: this.props.boxSize,\r\n\t      width: this.props.boxSize,\r\n\t      backgroundColor: 'blue',\r\n\t      // backgroundImage: `url(${this.state.img})`\r\n\t    }\r\n\t\treturn (\r\n\t\t\t<div style={cellStyle} className=\"cell\" onClick={this.props.fireClick} id={this.props.id}>\r\n\t\t\t\t<div className=\"icon\">\r\n\t\t\t\t\t{this.props.shipImage}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Board\r\n","import React, { Component } from 'react';\r\n\r\nclass GameInfo extends Component{\r\n\treset=(e)=>{\r\n\t\t// prevent page refresh\r\n\t\te.preventDefault()\r\n\t\t// call board initialize function\r\n\t\tthis.props.reset()\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"footer\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p>Torpedo Remains : {this.props.boardInfo.torpedoCount}</p>\r\n\t\t\t\t\t<form className=\"form-button\" onSubmit={this.reset}>\r\n\t\t\t\t\t\t<button className=\"button1\" type=\"submit\">Reset</button>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\tShip Remains : {this.props.boardInfo.battleShipRemains}/{this.props.boardInfo.battleShipTotal}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[0][1]}({this.props.boardInfo.shipInfo[0][2]}Blocks) : {this.props.boardInfo.shipInfo[0][4]}/{this.props.boardInfo.shipInfo[0][3]} <br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[1][1]}({this.props.boardInfo.shipInfo[1][2]}Blocks) : {this.props.boardInfo.shipInfo[1][4]}/{this.props.boardInfo.shipInfo[1][3]}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[2][1]}({this.props.boardInfo.shipInfo[2][2]}Blocks) : {this.props.boardInfo.shipInfo[2][4]}/{this.props.boardInfo.shipInfo[2][3]}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[3][1]}({this.props.boardInfo.shipInfo[3][2]}Blocks) : {this.props.boardInfo.shipInfo[3][4]}/{this.props.boardInfo.shipInfo[3][3]}<br/>\r\n\t\t\t\t\t{this.props.boardInfo.shipInfo[4][1]}({this.props.boardInfo.shipInfo[4][2]}Blocks) : {this.props.boardInfo.shipInfo[4][4]}/{this.props.boardInfo.shipInfo[4][3]}<br/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default GameInfo","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Board from './Board';\r\nimport GameInfo from './GameInfo';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      boardSize: 10,\r\n      //0: available, 1: empty hit, 10: ship, 11: ship hit\r\n      boardArray:[],\r\n      shipImageArray:[],\r\n      torpedoCount:50,\r\n      //s1: ship key, ship name, ship size, no of ship, no ship remain\r\n      shipInfo:[[1,\"Carrier\",5,1,1], [2,\"Battleship\",4,2,2], [3,\"Destroyer\",3,2,2], [4,\"Submarine\",3,2,2], [5,\"Patrol Boat\",2,2,2]],\r\n      shipPosition:[],\r\n      shipHitCondition:[],\r\n      boardColWidth : [],\r\n      shipHitMessage:\"\",\r\n      winStatus:\"\",\r\n      battleShipTotal:0,\r\n      battleShipRemains:0,\r\n      clickedCellArray:[],\r\n      boxSize: '50px'\r\n    }\r\n  }\r\n\r\n  getScreenWidth=()=>{\r\n     var de = document.body.parentNode;\r\n     var db = document.body;\r\n     if(window.opera) return db.clientWidth;\r\n     if (document.compatMode=='CSS1Compat') return de.clientWidth;\r\n     else return db.clientWidth;\r\n  }\r\n\r\n\r\ncomponentDidMount(){\r\n  let {boardSize, boardArray, torpedoCount, shipInfo, shipPosition, shipHitCondition, boardColWidth, battleShipRemains, battleShipTotal, boxSize, shipImageArray} = this.state;\r\n  //fill initial board data with 0\r\n  // boardArray=this.createBoard(boardArray,boardSize)\r\n\r\n  boardArray=this.createBoard(boardArray,boardSize)\r\n  console.log(\"boardArray: \",boardArray);\r\n  // boardArray = Array(boardSize**2).fill(0);\r\n\r\n  shipImageArray = Array(boardSize**2).fill(\"\");\r\n  let screenWidth = this.getScreenWidth()\r\n  if(screenWidth< 500){\r\n    boxSize = '40px';\r\n  }\r\n  console.log('screenWidth',screenWidth)\r\n  //set up column width\r\n  boardColWidth = Array(boardSize).fill(boxSize)\r\n  console.log(\"boardColWidth\", boardColWidth)\r\n  // this.placeShip();\r\n\r\n  let shipCount = shipInfo.length;\r\n  let currentShipPosition=[];\r\n  let currentShipHitCondition=[];\r\n  let loopBreaker = 100;\r\n  //loop untill all ships are placed\r\n  battleShipRemains = shipInfo.map(v=>v[4]).reduce((a,b)=>a+b)\r\n  battleShipTotal = battleShipRemains;\r\n  while(shipCount > 0){\r\n    //start with shipInfo[0]\r\n    loopBreaker --\r\n    // console.log(\"loopBreaker-first loop:\", loopBreaker)\r\n    // generate index for ship names. 0:Carrier,1:Battleship,2:Destroyer,3:Submarine,4:Patrol boat\r\n    let shipNamePosition = shipInfo.length - shipCount\r\n    // console.log(\"shipNamePosition: \",shipNamePosition);\r\n    //0: kinds of ships, 1: name of ships, 2:length of ships, 3: # of ships 4: # of ship remains\r\n    let noOfShip = shipInfo[shipNamePosition][3]\r\n    //loop until # of ships are placed\r\n    while(noOfShip>0){\r\n      // set up random position and direction 0 : x(down), 1 : y(right)\r\n      let shipDirection = Math.floor(Math.random()*2)\r\n      // generate random position for starting point.\r\n      let firstShipPosition = Math.floor(Math.random()*boardSize**2)\r\n      // x: tens' digit, y = units' digit\r\n      let x = Math.trunc(firstShipPosition/boardSize)%boardSize;\r\n      let y = firstShipPosition % boardSize;\r\n      // in case of empty boardArray, break loop\r\n      if(boardArray.length < boardSize**2){\r\n        // console.log(\"issue with boardArray size: \", boardArray, boardArray.length);\r\n        noOfShip--\r\n        shipCount--\r\n        break;\r\n      }\r\n\r\n      if(loopBreaker<0){\r\n        noOfShip--\r\n        shipCount--\r\n        break;\r\n      }\r\n      // if 1st position of ship + ship size is less than board size w/direction & digit match (0, x), (1, y)\r\n      if((shipDirection === 0 && x + shipInfo[shipNamePosition][2]<boardSize)||(shipDirection === 1 && y + shipInfo[shipNamePosition][2]<boardSize)){\r\n        // direction : 0 = ten, 1 = one\r\n        let digit = shipDirection ===0 ? boardSize**1:boardSize**0\r\n        // check if any of ship positions are empty\r\n        let checkPositionCount = 0;\r\n        // check if board is empty for ship lenth\r\n        for(let i = 0;i<shipInfo[shipNamePosition][2];i++){\r\n          // check left,right,up,down position, if out of board postion, reset to current postion\r\n          let xBefore = x-1 <0 ? x : x-1\r\n          let xAfter = x+1 >= boardSize ? x : x+1\r\n          let yBefore = y-1 < 0 ? y : y-1\r\n          let yAfter = y+1 >= boardSize ? y : y+1\r\n\r\n          // check if all neibouring blocks blocks empty\r\n          if((boardArray[x*boardSize+y+i*digit]===0)&&(boardArray[(xBefore)*boardSize+y+i*digit]===0)&&(boardArray[(xAfter)*boardSize+y+i*digit]===0)&&(boardArray[x*boardSize+(yAfter)+i*digit]===0)&&(boardArray[x*boardSize+(yBefore)+i*digit]===0)&&(boardArray[xBefore*boardSize+(yBefore)+i*digit]===0)&&(boardArray[xBefore*boardSize+(yAfter)+i*digit]===0)&&(boardArray[xAfter*boardSize+(yBefore)+i*digit]===0)&&(boardArray[xAfter*boardSize+(yAfter)+i*digit]===0)){\r\n            checkPositionCount++\r\n          }\r\n        }\r\n        // place ship info if checkPositionCount = size of ship\r\n        if(checkPositionCount === shipInfo[shipNamePosition][2]){\r\n          for(let i = 0; i<shipInfo[shipNamePosition][2];i++){\r\n            //x*boardSize+y : start of array, i*digit: next position adder\r\n            boardArray[x*boardSize+y+i*digit]=shipInfo[shipNamePosition][0]*10\r\n            //collect a ship position\r\n            currentShipPosition.push(x*boardSize+y+i*digit)\r\n            currentShipHitCondition.push(1)\r\n          }\r\n          noOfShip--;\r\n          // add a ship postion to ship position array\r\n          shipPosition.push(currentShipPosition);\r\n          shipHitCondition.push(currentShipHitCondition);\r\n          // reset current ship position array\r\n          currentShipPosition=[];\r\n          currentShipHitCondition=[];\r\n          loopBreaker--;\r\n        }\r\n      }\r\n\r\n    }\r\n    shipCount--;\r\n    if(loopBreaker<0){\r\n      noOfShip--\r\n      shipCount--\r\n      break;\r\n    }\r\n  }\r\n\r\n\r\n  this.setState({boardArray:boardArray, shipPosition:shipPosition, shipHitCondition:shipHitCondition, boardColWidth:boardColWidth, battleShipRemains:battleShipRemains, battleShipTotal:battleShipTotal, boxSize:boxSize, shipImageArray:shipImageArray})\r\n  // console.log(\"shipInfo\",shipInfo)\r\n  // console.log(\"boardArray\", boardArray)\r\n  // console.log(\"shipPosition\",shipPosition)\r\n  // console.log(\"shipHitCondition\", shipHitCondition)\r\n  // console.log(\"boardColWidth\",boardColWidth)\r\n}\r\n\r\nreset=()=>{\r\n  window.location.reload()\r\n}\r\n\r\ncreateBoard=(boardArray,boardSize)=>{\r\n  // let {boardArray, boardSize}=this.state;\r\n  // console.log(\"boardArray in before createBoard:\",boardArray);\r\n  boardArray=Array(boardSize**2).fill(0)\r\n  // console.log(\"boardArray in createBoard:\",boardArray);\r\n  return boardArray\r\n  // this.setState({boardArray:boardArray})\r\n  // console.log(\"boardArray setState createBoard:\",boardArray);\r\n}\r\n\r\nplaceShip=()=>{\r\n\r\n}\r\n\r\n\r\nfireClick = e =>{\r\n  let cellId = parseInt(e.target.id);\r\n  let {boardArray, boardSize, torpedoCount, shipInfo, shipPosition, shipHitCondition, shipHitMessage, winStatus, battleShipRemains, clickedCellArray, shipImageArray}=this.state\r\n  console.log(\" \")\r\n  console.log(this.state)\r\n\r\n  var x = document.getElementById(cellId);\r\n  console.log(\"x: \",x)\r\n\r\n  // if torpedo count >0, ones' digit of cell === 0, and win is not declared\r\n  if(torpedoCount>0 && boardArray[cellId]%boardSize===0 && winStatus===\"\" ){\r\n    // increase one\r\n    boardArray[cellId]++;\r\n    torpedoCount--;\r\n    // ship hit message reset\r\n    shipHitMessage=\"\";\r\n    // ships are in the cell\r\n    if(boardArray[cellId]>1){\r\n      //get x, y position by cell Id on ship postion array\r\n      let pos = this.getIndexOfHit(shipPosition,cellId);\r\n      // ship hit condition to from 1 to 0\r\n      shipHitCondition[pos[0]][pos[1]]=0;\r\n      // calculate individual ship block remains\r\n      let shipRemain = shipHitCondition[pos[0]].reduce((a,b)=> a+b)\r\n      // calculate total ship block remains\r\n      let totalShipRemain = shipHitCondition.reduce((a,b)=> a.concat(b)).reduce((a,b)=>a+b)\r\n      // if no more available ship, game win\r\n      if(totalShipRemain===0){\r\n        shipImageArray=boardArray.map(v=>v>1?\"🚢\":\"\");\r\n        winStatus = \"You won the game\";\r\n        //make zero for ship remain count for game info display\r\n        for(let i=0; i<shipInfo.length;i++){\r\n          shipInfo[i][4]=0\r\n        }\r\n        //reset total battle ship remain to zero for game info display\r\n        battleShipRemains = 0;\r\n        // if torpedo count is 0, game lost\r\n      } else if(torpedoCount===0){\r\n        winStatus = \"You lost the game\";\r\n        shipImageArray=boardArray.map(v=>v>1?\"🚢\":\"\");\r\n        // if no win or loss and remain ship block = 0\r\n      } else if(shipRemain===0){\r\n        //ship block to zero, then make ship hit message.\r\n        //boardArray[cellId] = cel value 11, 21, 31, 41, 51.\r\n        //divde by 10, then value = 1, 2, 3,4,5 then search value in shipInfo to check ship's name\r\n          shipHitMessage = `${shipInfo[Math.trunc(boardArray[cellId]/boardSize)-1][1]} has been destroyed` ;\r\n          // reduce ship remain count\r\n          shipInfo[Math.trunc(boardArray[cellId]/boardSize)-1][4]--;\r\n          // calculate total ship remain from shipInfo array\r\n          battleShipRemains = shipInfo.map(v=>v[4]).reduce((a,b)=>a+b);\r\n      }\r\n      // torpedo count = 0 after using last torpedo\r\n    } else {\r\n      if(torpedoCount===0){\r\n        winStatus = \"You lost the game\";\r\n        // assign ship icon to ship position to display\r\n        shipImageArray=boardArray.map(v=>v>1?\"🚢\":\"\");\r\n        // change background color\r\n        x.style.backgroundColor = 'gray';\r\n      }\r\n\r\n    }\r\n    // change of color in board block\r\n    if(boardArray[cellId]>1){\r\n      // change color if ship has been hit\r\n      x.style.backgroundColor = 'red';\r\n    } else {\r\n      // chnage color if torpedo missed\r\n      x.style.backgroundColor = 'gray';\r\n    }\r\n    //collecting color changed obj to array for later reset background color\r\n    clickedCellArray.push(x);\r\n    console.log(\"clickedCellArray\", clickedCellArray)\r\n    console.log(\"clickedCellArray id\", clickedCellArray[0].id)\r\n    console.log(\"shipImageArray\", shipImageArray)\r\n  }\r\n\r\n  this.setState({boardArray:boardArray, torpedoCount:torpedoCount, shipPosition:shipPosition, shipHitCondition:shipHitCondition, shipHitMessage:shipHitMessage, winStatus:winStatus, battleShipRemains:battleShipRemains, clickedCellArray:clickedCellArray, shipImageArray:shipImageArray})\r\n}\r\n\r\n// return [x, y] from array & number\r\ngetIndexOfHit = (arr, k) =>{\r\n    if (!arr){\r\n        return [];\r\n    }\r\n    for(let i=0; i<arr.length; i++){\r\n        let index = arr[i].indexOf(k);\r\n        if (index > -1){\r\n            return [i, index];\r\n        }\r\n    }\r\n    return [];\r\n}\r\n\r\n  render(){\r\n    console.log('render state', this.state)\r\n    let grids = this.state.boardArray.map((v, i)=>{\r\n      return (\r\n        <Board id = {i} key={i} fireClick={this.fireClick} boardValue={this.state.boardArray[i]} boxSize={this.state.boxSize} winStatus={this.state.winStatus} shipImage={this.state.shipImageArray[i]} />\r\n        )\r\n    })\r\n    console.log(\"grids\",grids)\r\n\r\n    let gridStyle={\r\n      display: 'grid',\r\n      margin: 'auto',\r\n      justifyContent: 'center',\r\n      gridTemplateColumns: this.state.boardColWidth.join(' ')\r\n    }\r\n    return(\r\n      <div>\r\n        <Header boardInfo={this.state} />\r\n        <div style={gridStyle}>\r\n          {grids}\r\n        </div>\r\n        <GameInfo boardInfo={this.state} reset={this.reset}/>\r\n      </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}